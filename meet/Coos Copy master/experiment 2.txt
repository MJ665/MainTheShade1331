                             experiment 2

To Study and develop a program to calculate 1’s and 2’s complement of a Binary number.

Lab Objective: - Students were able to use 1’s and 2’s Complement in C and C++ Language.

Theory: - 
1’s complement :-
1’s complement of a binary number is another binary number obtained by toggling all bits in it, i.e., transforming the 0 bit to 1 and the 1 bit to 0.
Examples:  Let numbers be stored using 4 bits
1's complement of 7 (0111) is 8 (1000)
1's complement of 12 (1100) is 3 (0011)
2’s complement of a binary number is 1 added to the 1’s complement of the binary number.These representations are used for signed numbers.
Examples: Let numbers be stored using 4 bits
2's complement of 7 (0111) is 9 (1001)
2's complement of 12 (1100) is 4 (0100)
The main difference between 1′ s complement and 2′ s complement is that 1′ s complement has two representations of 0 (zero) — 00000000, which is positive zero (+0), and 11111111, which is negative zero (-0); whereas in 2′ s complement, there is only one representation for zero — 00000000 (0) because if we add 1 to 11111111 (-1), we get 100000000, which is nine bits long. Since only eight bits are allowed, the left-most bit is discarded(or overflowed), leaving 00000000 (-0) which is the same as positive zero. This is the reason why 2′ s complement is generally used.
Another difference is that while adding numbers using 1′ s complement, we first do binary addition, then add in an end-around carry value. But, 2′ s complement has only one value for zero and doesn’t require carry values.
Range of 1’s complement for n bit number is from -2n-1-1 to 2n-1-1 whereas the range of 2’s complement for n bit is from -2n-1 to 2n-1-1.
There are 2n-1 valid numbers in 1’s complement and 2n valid numbers in 2’s complement.
Please write comments if you find anything incorrect, or if you want to share more information about the topic discussed above.

Program:-
#include <stdio.h>  
int main()  
{  
   int n;  // variable declaration  
   printf("Enter the number of bits do you want to enter :");  
   scanf("%d",&n);  
   char binary[n+1];  // binary array declaration;   
   char onescomplement[n+1]; // onescomplement array declaration   
   char twoscomplement[n+1]; // twoscomplement array declaration  
   int carry=1; // variable initialization  
   printf("\nEnter the binary number : ");  
   scanf("%s", binary);  
   printf("%s", binary);  
   printf("\nThe ones complement of the binary number is :");  
     
   // Finding onescomplement in C  
   for(int i=0;i<n;i++)  
   {  
       if(binary[i]=='0')  
       onescomplement[i]='1';  
       else if(binary[i]=='1')  
       onescomplement[i]='0';  
   }  
   onescomplement[n]='\0';  
   printf("%s",onescomplement);  
    
  
printf("\nThe twos complement of a binary number is : ");  
  
// Finding twoscomplement in C  
for(int i=n-1; i>=0; i--)  
    {  
        if(onescomplement[i] == '1' && carry == 1)  
        {  
            twoscomplement[i] = '0';  
        }  
        else if(onescomplement[i] == '0' && carry == 1)  
        {  
            twoscomplement[i] = '1';  
            carry = 0;  
        }  
        else  
        {  
            twoscomplement[i] = onescomplement[i];  
        }  
    }  
twoscomplement[n]='\0';  
printf("%s",twoscomplement);  
return 0;  
}  
Result:
1's complement and 2's complement are binary representations used for signed numbers. 1's complement flips all bits to represent negative values and has two representations for zero, while 2's complement has a single zero representation and is the more common choice in modern computers.

Discussion:
2's complement is favored in modern computing due to its simplicity and consistent arithmetic operations. It has a single representation for zero, simplifying mathematical operations and avoiding complexities related to dual zero representations. Understanding both representations is crucial in computer science and digital electronics.

In conclusion, both 1's complement and 2's complement are binary representations for signed numbers, but 2's complement is the more widely used and practical choice in modern computer systems. It simplifies arithmetic operations, avoids the complexities of dual representations for zero, and offers a wider range of representable numbers. Understanding these two representations is fundamental in digital electronics and computer science, as it underlies the way computers store and manipulate signed numbers.











 

 	
 

 

 	
 	
 

 	
 

 

 				

